{"version":3,"sources":["app.js"],"names":[],"mappings":";;;;;;;;;;;;gCAAwB,oBAAoB;;uBACxB,SAAS;;;;kBACd,IAAI;;;;AACnB,sBAHS,OAAO,GAGP,CAAC;;AAEV,IAAM,OAAO,GAAG,uCAAuC,CAAC;;IACnC,OAAO;AACf,WADQ,OAAO,CACd,UAAU,EAAE;0BADL,OAAO;;AAExB,QAAG,CAAC,UAAU,IAAI,UAAU,CAAC,MAAM,KAAK,SAAS,EAC/C,UAAU,CAAC,MAAM,GAAG,MAAM,CAAA;AAC5B,QAAI,CAAC,UAAU,GAAG,UAAU,CAAC;GAC9B;;eALkB,OAAO;;WAOpB,gBAAC,IAAI,EAAE,EAAE,EAAE;AACf,UAAI,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,GAAC,GAAG,CAAC;AACxC,UAAI,WAAW,GAAG,gBAAG,SAAS,CAAC,IAAI,CAAC,CAAC;AACrC,UAAI,GAAG,GAAM,OAAO,mCAA8B,MAAM,GAAG,WAAW,AAAE,CAAC;;AAEzE,2BAAQ,GAAG,CAAC,GAAG,EAAE,UAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAK;AACxC,YAAG,EAAE,EAAC;AACJ,cAAI,GAAG,EAAE;AACP,mBAAO,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;WACtB;AACD,iBAAO,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;SAC5C;OACF,CAAC,CAAC;KACJ;;;WAEW,sBAAC,IAAI,EAAE,EAAE,EAAE;AACrB,UAAI,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,GAAC,GAAG,CAAC;AACxC,UAAI,WAAW,GAAG,gBAAG,SAAS,CAAC,IAAI,CAAC,CAAC;AACrC,UAAI,GAAG,GAAM,OAAO,mCAA8B,MAAM,GAAG,WAAW,AAAE,CAAC;;AAEzE,2BAAQ,GAAG,CAAC,GAAG,EAAE,UAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAK;AACxC,YAAG,EAAE,EAAC;AACJ,cAAI,GAAG,EAAE;AACP,mBAAO,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;WACtB;AACD,iBAAO,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;SAC5C;OACF,CAAC,CAAC;KACJ;;;SAnCkB,OAAO;;;qBAAP,OAAO","file":"app.js","sourcesContent":["import { install } from 'source-map-support';\nimport request from 'request';\nimport qs from 'qs';\ninstall();\n\nconst baseUrl = 'http://api.redtube.com/?data=redtube.';\nexport default class Redtube {\n  constructor(properties) {\n    if(!properties || properties.output === undefined)\n      properties.output = 'json'\n    this.properties = properties;\n  }\n\n  search(opts, cb) {\n    let output = this.properties.output+'&';\n    let querystring = qs.stringify(opts);\n    let url = `${baseUrl}Videos.searchVideos&output=${output}${querystring}`;\n\n    request.get(url, (err, response, body) => {\n      if(cb){\n        if (err) {\n          return cb(err, null);\n        }\n        return cb(null, JSON.parse(response.body));\n      }\n    });\n  }\n\n  getVideoById(opts, cb) {\n    let output = this.properties.output+'&';\n    let querystring = qs.stringify(opts);\n    let url = `${baseUrl}Videos.getVideoById&output=${output}${querystring}`;\n\n    request.get(url, (err, response, body) => {\n      if(cb){\n        if (err) {\n          return cb(err, null);\n        }\n        return cb(null, JSON.parse(response.body));\n      }\n    });\n  }\n}"],"sourceRoot":"/Users/paulopires/Workspace/Github/paulohp/redtube/src"}